from utils import create_account, list_accounts, deposit_to_account, withdraw_from_account, search_account
from db_handler import load_accounts, save_accounts
from api import convert_currency
import hashlib

# Funktion f√∂r att hasha l√∂senord
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def main():
    print("V√§lkommen till Bankens Kontoapplikation!")

    # Ladda konton fr√•n CSV-fil
    accounts_file = "accounts.csv"
    accounts = load_accounts(accounts_file)

    while True:
        print("""
        Meny:
        1. Skapa konto
        2. Lista alla konton
        3. Ins√§ttning
        4. Uttag
        5. S√∂k efter ett konto
        6. Valutakonvertering
        7. Ta bort ett konto
        8. Avsluta
        """)
        try:
            val = int(input("V√§lj ett alternativ (1-8): ").strip())
        except ValueError:
            print("‚ùå Ogiltig inmatning. Ange ett nummer mellan 1 och 8.")
            continue

        if val == 1:
            # Skapa nytt konto
            print("üîπ Skapa nytt konto:")
            namn = input("Ange namn p√• kontoinnehavaren: ").strip()
            try:
                balans = float(input("Ange startbalans: ").strip())
            except ValueError:
                print("‚ùå Ogiltigt belopp. F√∂rs√∂k igen.")
                continue
            l√∂senord = input("Ange l√∂senord f√∂r kontot: ").strip()
            hashat_l√∂senord = hash_password(l√∂senord)
            
            # H√§mta h√∂gsta konto-ID och √∂ka med 1
            nytt_konto_id = max(accounts.keys(), default=0) + 1
            accounts[nytt_konto_id] = {
                "name": namn,
                "balance": balans,
                "password": hashat_l√∂senord
            }
            print(f"‚úÖ Konto skapat med ID: {nytt_konto_id}")
            save_accounts(accounts_file, accounts)

        elif val == 2:
            # Lista konton
            print("üìã Lista √∂ver alla konton:")
            for konto_id, info in accounts.items():
                print(f"ID: {konto_id}, Namn: {info['name']}, Saldo: {info['balance']}")

        elif val in [3, 4]:  # Hantera ins√§ttning och uttag tillsammans
            try:
                konto_id = int(input("Ange konto-ID: ").strip())
            except ValueError:
                print("‚ùå Ogiltigt konto-ID. F√∂rs√∂k igen.")
                continue

            if konto_id not in accounts:
                print("‚ö†Ô∏è Konto-ID hittades inte.")
                continue

            try:
                belopp = float(input("Ange belopp: ").strip())
            except ValueError:
                print("‚ùå Ogiltigt belopp. F√∂rs√∂k igen.")
                continue

            if val == 3:  # Ins√§ttning
                accounts[konto_id]["balance"] += belopp
                print(f"üí∞ {belopp} har satts in p√• konto {konto_id}.")
            elif val == 4:  # Uttag
                if belopp <= accounts[konto_id]["balance"]:
                    accounts[konto_id]["balance"] -= belopp
                    print(f"üí∏ {belopp} har tagits ut fr√•n konto {konto_id}.")
                else:
                    print("‚ö†Ô∏è Otillr√§ckligt saldo.")

            save_accounts(accounts_file, accounts)

        elif val == 5:
            # S√∂k efter konto
            try:
                konto_id = int(input("Ange konto-ID att s√∂ka efter: ").strip())
            except ValueError:
                print("‚ùå Ogiltigt konto-ID. F√∂rs√∂k igen.")
                continue

            if konto_id in accounts:
                konto = accounts[konto_id]
                print(f"üîç ID: {konto_id}, Namn: {konto['name']}, Saldo: {konto['balance']}")
            else:
                print("‚ö†Ô∏è Konto-ID hittades inte.")

        elif val == 6:
            # Valutakonvertering
            try:
                konto_id = int(input("Ange konto-ID f√∂r valutakonvertering: ").strip())
            except ValueError:
                print("‚ùå Ogiltigt konto-ID. F√∂rs√∂k igen.")
                continue

            if konto_id in accounts:
                saldo = accounts[konto_id]["balance"]
                print(f"üí∞ Nuvarande saldo: {saldo}")
                target_currency = input("Ange m√•lets valuta (ex. USD, EUR): ").strip().upper()
                nytt_saldo = convert_currency(saldo, target_currency)
                if nytt_saldo:
                    print(f"‚úÖ Konverterat saldo i {target_currency}: {nytt_saldo}")
                else:
                    print("‚ö†Ô∏è Valutakonvertering misslyckades.")
            else:
                print("‚ö†Ô∏è Konto-ID hittades inte.")

        elif val == 7:
            # Ta bort konto
            try:
                konto_id = int(input("Ange konto-ID att ta bort: ").strip())
            except ValueError:
                print("‚ùå Ogiltigt konto-ID. F√∂rs√∂k igen.")
                continue

            if konto_id in accounts:
                confirmation = input("‚ö†Ô∏è √Ñr du s√§ker p√• att du vill ta bort detta konto? (j/n): ").strip().lower()
                if confirmation == "j":
                    del accounts[konto_id]
                    print(f"üóëÔ∏è Konto {konto_id} har tagits bort.")
                    save_accounts(accounts_file, accounts)
                else:
                    print("‚ùå Kontot togs inte bort.")
            else:
                print("‚ö†Ô∏è Konto-ID hittades inte.")

        elif val == 8:
            # Avsluta programmet
            print("üíæ Sparar data och avslutar...")
            save_accounts(accounts_file, accounts)
            break

        else:
            print("‚ùå Ogiltigt val, f√∂rs√∂k igen.")

if __name__ == "__main__":
    main()
